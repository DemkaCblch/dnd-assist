services:

  nginx:
    build: ./nginx
    image: nginx:latest
    container_name: nginx
    ports:
      - '80:80'
    restart: always
    healthcheck:
      test: ['CMD', 'service', 'nginx', 'status']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s

  psql:
    build: ./psql
    image: postgres
    container_name: psql
    environment:
      POSTGRES_DB: dnd-assist
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ../init_db:/docker-entrypoint-initdb.d
      - db-data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    restart: always
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U admin -d dnd-assist' ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    shm_size: 128mb

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:7.2
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - '5050:80'
    restart: always

  mongo:
    container_name: mongo
    image: mongo
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - mongodb:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    ports:
      - '8081:8081'
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin@mongo:27017/
      ME_CONFIG_BASICAUTH: false

  rabbitmq:
    image: rabbitmq:3.10-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - /usr/dnd-assist/rabbitmq:/var/lib/rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - gateway
    healthcheck:
      test: ['CMD-SHELL', 'rabbitmqctl start_app && rabbitmqctl status']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7.4-alpine
    container_name: redis
    hostname: redis
    restart: always
    environment:
      - REDIS_PASS=admin
    volumes:
      - /usr/dnd-assist/redis:/data
    ports:
      - '6379:6379'
    networks:
      - gateway
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  swagger:
    container_name: swagger
    restart: always
    image: swaggerapi/swagger-ui:latest
    ports:
      - "8080:8080"
    environment:
      - API_URL=http://localhost:8080/api/v1/swagger/

  django:
    build: ./backend
    container_name: django
    ports:
      - '8000:8000'
    command: python backend/manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/usr/src/app
    depends_on:
      - redis
      - psql

  celery:
    build: ./backend
    container_name: celery
    command: celery -A tasks worker --loglevel=info --pool=solo
    depends_on:
      - django
      - redis

volumes:
  db-data:
  pgadmin-data:
  minio-storage:
  mongodb:
  app:

networks:
  gateway: {}